const bcrypt = require("bcryptjs");
const UserModel = require("../models/clientModel");
const generateAccessToken = require("../../utils/tokens");
const OTPModel = require("../models/otpModel"); 
const otpGenerator = require("otp-generator");
const { sendOTP } = require("../../utils/email");

exports.generateOTP = async (req, res)=>{
  try {
    const { email } = req.body;
    
    if (!email) {
      return res.status(400).json({ success: false, msg: "Email requis" });
    }

    // üîé V√©rifier si un OTP existe d√©j√† pour cet email
    const existingOTP = await OTPModel.findOne({ email });

    // üïí Si l'OTP existe et n'a pas encore expir√©, emp√™cher une nouvelle g√©n√©ration
    if (existingOTP && existingOTP.expiresAt > Date.now()) {
      return res.status(400).json({ success: false, msg: "Un OTP est d√©j√† actif, v√©rifiez votre email !" });
    }

    // üîÑ G√©n√©rer un nouvel OTP (ex: "12345")
    const otp = otpGenerator.generate(5, {
      upperCaseAlphabets: false,
      specialChars: false,
      lowerCaseAlphabets: false,
    });

    console.log(`OTP g√©n√©r√© pour ${email}: ${otp}`); // üõ†Ô∏è Debugging

    // üîí Hasher l'OTP avant de le stocker
    const hashedOTP = await bcrypt.hash(otp, 10);

    // üóëÔ∏è Supprimer l'ancien OTP et enregistrer le nouveau
    await OTPModel.findOneAndDelete({ email });
    await OTPModel.deleteMany({ email }); 
    const newOTP = await OTPModel.create({ email, otp: hashedOTP, expiresAt: Date.now() + 5 * 60 * 1000 });

    console.log("OTP sauvegard√© en base de donn√©es:", newOTP); // üõ†Ô∏è Debugging

    // üì© Envoyer l'OTP par e-mail
await sendOTP(email, otp);
    

    return res.status(200).json({ success: true, msg: "OTP envoy√© avec succ√®s !" });

  } catch (err) {
    console.error("Erreur lors de la g√©n√©ration de l'OTP:", err);
    return res.status(500).json({ success: false, msg: "Erreur serveur" });
  }
};


exports.verifyOTP = async (req, res) => {
  try {
    const { email, otp } = req.body;

    // Rechercher l'OTP associ√© √† l'e-mail
    const otpRecord = await OTPModel.findOne({ email });

    if (!otpRecord) {
      return res.status(400).json({ msg: "OTP invalide ou expir√©" });
    }

    // V√©rifier si l'OTP est expir√©
    if (Date.now() > otpRecord.expiresAt){
      await OTPModel.deleteOne({ email });
      return res.status(400).json({ msg: "OTP expir√©" });
    }

    // V√©rifier si l'OTP est correct
    const isMatch = otpRecord.otp === otp || await bcrypt.compare(otp, otpRecord.otp);
    
    if (!isMatch) {
      return res.status(400).json({ msg: "OTP incorrect" });
    }

    // Mettre √† jour `verifie` dans UserModel
    const user = await UserModel.findOneAndUpdate(
      { email },
      { $set: { verifie: true } },
      { new: true } // ‚úÖ Retourner le document mis √† jour
    );

    // Supprimer l'OTP apr√®s v√©rification r√©ussie
    await OTPModel.deleteOne({ email });

    const val1 = generateAccessToken(user._id);
    
    
    res.json({ msg: "OTP v√©rifi√© avec succ√®s !",user,val1});
  } catch (err) {
    console.error(err);
    res.status(500).json({ msg: "Erreur serveur" });
  }
};




